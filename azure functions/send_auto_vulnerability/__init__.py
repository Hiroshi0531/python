import logging
import json
import azure.functions as func
import datetime
from dateutil import relativedelta
import urllib
import urllib.request
from urllib.parse import quote
from xml.dom import minidom
import ssl

#####################################################################################
### Select from low, middle, high. If you choice middle, script collect middle and high.
SEVERITY = "middle"

### Select from daily, weekly, monthly
INTERVAL = "weekly"

### Specify notify email subject
NOTIFY_SUBJECT = "[CAUTION] Found Vulnerability Information"

### Select from product name from result to call getProductList API (https://jvndb.jvn.jp/myjvn?method=getProductList&feed=hnd)
### product.txtで指定した製品をリストに格納
with open('product.txt','r') as f:
    PRODUCTS = f.read().split('\n')

### リストに格納した製品名をURLクエリーに使用できるよう変換
for p in range(len(PRODUCTS)):
    PRODUCTS[p] = quote(PRODUCTS[p])

#####################################################################################

URL_PATH = "https://jvndb.jvn.jp/myjvn"
PRODUCT_LIST_METHOD = "getProductList"
VULN_OVERVIEW_LIST_METHOD = "getVulnOverviewList"
NS_STATUS = "http://jvndb.jvn.jp/myjvn/Status"
NS_SEC = "http://jvn.jp/rss/mod_sec/"
NS = "http://purl.org/rss/1.0/"
NS_PRODUCT = "http://jvndb.jvn.jp/myjvn/Results"

#SSLをTLSv1に設定
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)

def main(mytimer: func.TimerRequest, sendGridMessage: func.Out[str]):
    product_ids = get_product_ids(PRODUCTS)

    vulnerabilities = []
    for product in product_ids:
        vuls = get_vulnerability_list(product, SEVERITY, INTERVAL)
        if vuls:
            vulnerabilities.extend(vuls)
    if not vulnerabilities:
        logging("don't exist vulnerability.")
        return

    messages = ""
    for vul in vulnerabilities:
        if vul.get("title"):
            messages += "Title: " + vul["title"] + "\n"
        if vul.get("id"):
            messages += "ID: " + vul["id"] + "\n"
        if vul.get("cvss_score"):
            messages += "CVSS Score: " + vul["cvss_score"] + ", Severity: " + vul["cvss_severity"] + "\n"
        if vul.get("description"):
            messages += "Detail: " + vul["description"] + "\n"
        if vul.get("link"):
            messages += "URL: " + vul["link"] + "\n"
        messages += "\n"

    message = {
        "personalizations": [ {
          "to": [{
            "email": "xxx@xxx.com"#destination e-mail address
            }]}],
        "subject": NOTIFY_SUBJECT,
        "content": [{
            "type": "text/plain",
            "value": messages }]}

    sendGridMessage.set(json.dumps(message))
    return


def get_product_ids(product_names):
    product_ids = set()
    for name in product_names:
        url = URL_PATH + "?method=" + PRODUCT_LIST_METHOD + "&feed=hnd&keyword=" + name
        dom = minidom.parse(urllib.request.urlopen(url,context=context))
        for product in dom.getElementsByTagNameNS(NS_PRODUCT, "Product"):
            if product.getAttribute("pname") == name:
                product_ids.add(product.getAttribute("pid"))

    return product_ids


def get_vulnerability_list(product, severity, interval):
    vulnerabilities = []
    if severity == "low":
        severity = "l"
    elif severity == "middle":
        severity = "m"
    elif severity == "high":
        severity = "h"

    start = None
    now = datetime.datetime.now()
    end = now - datetime.timedelta(days=1)
    if interval == "daily":
        start = end
    elif interval == "weekly":
        start = now - datetime.timedelta(days=7)
    elif interval == "monthly":
        start = now - relativedelta.relativedelta(months=1)

    url = URL_PATH + "?method=" + VULN_OVERVIEW_LIST_METHOD \
          + "&feed=hnd" \
          + "&productId=" + product \
          + "&severity=" + severity \
          + "&dateFirstPublishedStartY=" + str(start.year) \
          + "&dateFirstPublishedStartM=" + str(start.month) \
          + "&dateFirstPublishedStartD=" + str(start.day) \
          + "&dateFirstPublishedEndY=" + str(end.year) \
          + "&dateFirstPublishedEndM=" + str(end.month) \
          + "&dateFirstPublishedEndD=" + str(end.day) \
          + "&rangeDatePublished=n&rangeDatePublic=n"

    dom = minidom.parse(urllib.request.urlopen(url,context=context))
    total = dom.getElementsByTagNameNS(NS_STATUS, "Status")[0].getAttribute("totalRes")
    for num in range(1, int(total), 50):
        url = url + "&startItem=" + str(num)
        dom = minidom.parse(urllib.request.urlopen(url,context=context))
        for item in dom.getElementsByTagNameNS(NS, "item"):
            vul = {}
            if len(item.getElementsByTagNameNS(NS_SEC, "identifier")) == 1:
                vul["id"] = item.getElementsByTagNameNS(NS_SEC, "identifier")[0].childNodes[0].nodeValue
            if len(item.getElementsByTagNameNS(NS, "link")) == 1:
                vul["link"] = item.getElementsByTagNameNS(NS, "link")[0].childNodes[0].nodeValue
            if len(item.getElementsByTagNameNS(NS, "title")) == 1:
                vul["title"] = item.getElementsByTagNameNS(NS, "title")[0].childNodes[0].nodeValue
            if len(item.getElementsByTagNameNS(NS, "description")) == 1:
                vul["description"] = item.getElementsByTagNameNS(NS, "description")[0].childNodes[0].nodeValue
            if len(item.getElementsByTagNameNS(NS_SEC, "cvss")) == 1:
                cvss = item.getElementsByTagNameNS(NS_SEC, "cvss")[0]
                vul["cvss_score"] = cvss.getAttribute("score")
                vul["cvss_severity"] = cvss.getAttribute("severity")

            vulnerabilities.append(vul)

    return vulnerabilities